client() {
#Permet de start le client (client start (l'ip)).
#Permet de start le client (client start (l'ip)).
if [ "$1" = "start" ]; then
    if [ ! -z "$2" ]; then
        if [ ! -z "$3" ]; then
           if [ "$3" = "left" ]; then
                echo "test"
                pactl load-module module-tunnel-sink server="$2":42010 channels=2 channel_map=left,left
           elif [ "$3" = "right" ]; then
                echo "test"
                pactl load-module module-tunnel-sink server="$2":42010 channels=1 channel_map=right
           else
                if [ ! -z "$4" ]; then
                        pactl load-module module-tunnel-sink server="$2":"$3" channels=2 channel_map="$4","$4"
                else
                        pactl load-module module-tunnel-sink server="$2":"$3"
                fi
           fi
        else
                pactl load-module module-tunnel-sink server="$2":42010
        fi
        echo "Connexion réussie"
    else
        echo "Erreur, veuillez rappeler avec l'adresse IP du serveur"
    fi

#Permet de stop le client (client stop).
elif [ "$1" = "stop" ]; then
	pactl unload-module module-tunnel-sink
	echo "Fin du fun"

#Permet d'intéragir avec plusieur server en simultané.
elif [ "$1" = "mul" ]; then
	#Permet de stop le multi (client mul stop).
	if [ "$2" = "stop" ]; then
		pactl unload-module module-combine-sink
		echo "Multicast end"

	#Permet de start le multi (client mul start).
	elif [ "$2" = "start" ]; then
		sinks=$(pactl list short sinks | awk '{print $2}')
		slaves=$(echo $sinks | tr ' ' ',')
		pactl load-module module-combine-sink slaves=$slaves
		echo "Le bordel commence!!"
	fi
else
	echo "start -> start the client \n stop -> stop the client."
fi
}

client "$1" "$2" "$3"

